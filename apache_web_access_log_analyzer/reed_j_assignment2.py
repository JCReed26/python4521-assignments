"""
Name: James Reed
Date: 09/15/25
Assignment: 2
Due Date: 09/26/25
About this project: Process analyze and rank apache web server logs. 
Assumptions: assumes correct user input of file path and date format of MM/DD/YYYY
All work below was performed solely by James
I [did not use] code generated by an AI tool.
"""

import sys
from collections import Counter

MONTH_NUMS = {
    "Jan": 1, "Feb": 2, "Mar": 3, "Apr": 4, "May": 5, "Jun": 6,
    "Jul": 7, "Aug": 8, "Sep": 9, "Oct": 10, "Nov": 11, "Dec": 12
}

class LogEntry:
    def __init__(self, ip, identity, authuser, date, request, status, bytes):
        self.ip = ip
        self.identity = identity
        self.authuser = authuser
        self.date = date
        self.request = request
        self.status = status
        self.bytes = bytes

def print_ranks(ranked_list):
    """Prints the ranked list of items."""
    for i, (item, count) in enumerate(ranked_list, start=1):
        print(f"  No. {i}: {item} {count}")
    print()

def get_top_n(counter, n=30):
    """Return the top n most common items from a Counter. Includes Ties."""
    most_common = counter.most_common()
    if len(most_common) <= n:
        return most_common
    cutoff = most_common[n - 1][1]
    return [item for item in most_common if item[1] >= cutoff]

# For larger log sets: split logs in half and process each half in a separate thread
def split_count_logs(logs):
    """Divide logs into host and resource lists."""
    host_ips, requested_resource = [], []
    for log in logs:
        host_ips.append(log.ip)
        # Only count resources for GET requests
        req_type = log.request.split()[0].replace('"', '')
        if req_type == "GET":
            requested_resource.append(log.request.split()[1] if len(log.request.split()) > 1 else "")
    return Counter(host_ips), Counter(requested_resource)

def convert_date(date_str):
    """Convert date to MM/DD/YYYY format."""
    day = date_str[0:2]
    month_str = date_str[3:6]
    year = date_str[7:11]
    month = f"{MONTH_NUMS[month_str]:02d}"
    return f"{month}/{day}/{year}"

# For larger log sets: split logs in half and process each half in a separate thread
def in_range_list(logs, start_date, end_date):
    """Returns a list of logs within specified date range."""
    return [log for log in logs if start_date <= log.date <= end_date]

# For larger log sets: split logs in half and process each half in a separate thread
def format_logs(logs):
    """Returns a list of LogEntry objects from raw log lines."""
    formatted_logs = []
    for log in logs:
        split_log = log.split()
        # adds LogEntry and configure date to be MM/DD/YYYY
        formatted_logs.append(
            LogEntry(
                ip=split_log[0], 
                identity=split_log[1], 
                authuser=split_log[2], 
                date=convert_date(split_log[3][1:12]), 
                request=' '.join(split_log[5:8]), 
                status=split_log[8], 
                bytes=split_log[9]
            )
        )
    return formatted_logs

def open_log_file(file_path):
    """Open and read the log file, returning its contents."""
    try:
        with open(file_path, 'r') as file:
            return file.read()
    except Exception as e:
        print(f"Error opening file: {e}")
    return None

if __name__ == "__main__":
    logFilePath = sys.argv[1] if len(sys.argv) > 1 else None
    start_date = sys.argv[2] if len(sys.argv) > 2 else "01/01/0000"
    end_date = sys.argv[3] if len(sys.argv) > 3 else "12/30/9999"

    print(f"Analyze ../{logFilePath} between {start_date} and {end_date}")

    file_data = open_log_file(logFilePath)
    lines = file_data.splitlines()
    formatted_logs = format_logs(lines)
    ranged_log_entries = in_range_list(formatted_logs, start_date, end_date)
    print(f"{len(ranged_log_entries)}/{len(lines)} lines from {start_date} to {end_date}\n")

    host_ips, requested_resource = split_count_logs(ranged_log_entries)
    
    sorted_hosts = get_top_n(host_ips, 30)
    print(f"Top {len(sorted_hosts)} most active hosts:")
    print_ranks(sorted_hosts)

    sorted_resources = get_top_n(requested_resource, 30)
    print(f"Top {len(sorted_resources)} most downloaded resources:")
    print_ranks(sorted_resources)